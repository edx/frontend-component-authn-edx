{"version":3,"file":"index.js","names":["React","forwardRef","getConfig","useIntl","Button","Skeleton","classNames","PropTypes","socialLogos","providersSelector","PENDING_STATE","useSelector","messages","SocialAuthButton","_ref","ref","provider","isLoginForm","inverseTextColor","formatMessage","registrationFields","state","register","id","providerId","name","providerName","loginUrl","registerUrl","handleSubmit","e","preventDefault","localStorage","setItem","marketingEmailsOptIn","url","currentTarget","dataset","providerUrl","window","location","href","LMS_BASE_URL","createElement","type","onClick","className","toLowerCase","variant","socialAuthProviderSigninTitle","socialAuthProviderSignupTitle","propTypes","shape","string","bool","isRequired","SocialAuthProviders","_ref2","thirdPartyAuthApiStatus","commonData","providers","height","count","Google","Apple","Facebook","Microsoft"],"sources":["../../../src/common-ui/SocialAuthButtons/index.jsx"],"sourcesContent":["import React, { forwardRef } from 'react';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Button, Skeleton } from '@openedx/paragon';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport socialLogos from './constants';\nimport providersSelector from '../../authn-component/data/selectors';\nimport { PENDING_STATE } from '../../data/constants';\nimport { useSelector } from '../../data/storeHooks';\nimport messages from '../messages';\n\nimport './index.scss';\n\n/**\n * A reusable button component for social authentication providers (Facebook, Google, etc.).\n *\n * @param {object} provider - Required. The social authentication provider\n * @param {boolean} isLoginForm - Whether to display a sign-in or sign-up text based on the login page context.\n * @param {boolean} inverseTextColor - Whether to use inverted text color (white for dark backgrounds).\n *\n * @returns {JSX.Element} The rendered SocialAuthButton component.\n */\nexport const SocialAuthButton = forwardRef(({\n  provider = null,\n  isLoginForm,\n  inverseTextColor = false,\n}, ref) => {\n  const { formatMessage } = useIntl();\n\n  const registrationFields = useSelector(state => state.register.registrationFields);\n\n  if (!provider) {\n    return null;\n  }\n\n  const {\n    id: providerId,\n    name: providerName,\n    loginUrl,\n    registerUrl,\n  } = provider;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // setting marketingEmailsOptIn state in local storage to preserve user marketing opt-in\n    // choice in case of SSO auto registratioon\n    localStorage.setItem('marketingEmailsOptIn', registrationFields?.marketingEmailsOptIn);\n    const url = e.currentTarget.dataset.providerUrl;\n    window.location.href = getConfig().LMS_BASE_URL + url;\n  };\n\n  return (\n    <Button\n      ref={ref}\n      id={providerId}\n      type=\"button\"\n      data-provider-url={isLoginForm ? loginUrl : registerUrl}\n      onClick={handleSubmit}\n      className={classNames(\n        `social-auth-button_${providerName.toLowerCase()} d-flex justify-content-start mb-3 \n        authn-sso-btn__pill-shaped`,\n        {\n          'text-white': inverseTextColor,\n          'text-black-50': !inverseTextColor,\n        },\n      )}\n      variant=\"tertiary\"\n    >\n      {socialLogos[providerName]}\n      <span>\n        {\n          isLoginForm\n            ? formatMessage(messages.socialAuthProviderSigninTitle, { providerName })\n            : formatMessage(messages.socialAuthProviderSignupTitle, { providerName })\n        }\n      </span>\n    </Button>\n  );\n});\n\nSocialAuthButton.propTypes = {\n  provider: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    loginUrl: PropTypes.string,\n    registerUrl: PropTypes.string,\n  }),\n  isLoginForm: PropTypes.bool.isRequired,\n  inverseTextColor: PropTypes.bool,\n};\n\n/**\n * A component that renders a group of SocialAuthButton components for different social authentication providers.\n *\n * @param {boolean} isLoginForm - Whether the component is used on a login page. Affects the displayed text.\n *\n * @returns {JSX.Element} The rendered SocialAuthProviders component.\n */\nconst SocialAuthProviders = forwardRef(({ isLoginForm = true }, ref) => {\n  const thirdPartyAuthApiStatus = useSelector(state => state.commonData.thirdPartyAuthApiStatus);\n  const providers = useSelector(providersSelector);\n\n  if (thirdPartyAuthApiStatus === PENDING_STATE) {\n    return (\n      <Skeleton height={44} count={4} />\n    );\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <SocialAuthButton isLoginForm={isLoginForm} provider={providers?.Google} ref={ref} />\n      <SocialAuthButton isLoginForm={isLoginForm} provider={providers?.Apple} inverseTextColor />\n      <SocialAuthButton isLoginForm={isLoginForm} provider={providers?.Facebook} inverseTextColor />\n      <SocialAuthButton isLoginForm={isLoginForm} provider={providers?.Microsoft} />\n    </div>\n  );\n});\n\nSocialAuthProviders.propTypes = {\n  isLoginForm: PropTypes.bool,\n};\n\nexport default SocialAuthProviders;\n"],"mappings":"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","ignoreList":[]}