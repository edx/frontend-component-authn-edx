{"version":3,"file":"index.js","names":["React","useEffect","useMemo","useState","Spinner","PropTypes","getThirdPartyAuthContext","setCurrentOpenedForm","setOnboardingComponentContext","validateContextData","BaseContainer","AuthnProvider","ENTERPRISE_LOGIN","FORGOT_PASSWORD_FORM","LOGIN_FORM","PENDING_STATE","PROGRESSIVE_PROFILING_FORM","REGISTRATION_FORM","RESET_PASSWORD_FORM","VALID_FORMS","useDispatch","useSelector","getAllPossibleQueryParams","ForgotPasswordForm","LoginForm","ProgressiveProfilingForm","RegistrationForm","ResetPasswordForm","EnterpriseSSO","getTpaHint","getTpaProvider","REQUIRE_PASSWORD_CHANGE","TOKEN_STATE","AuthnComponent","_ref","isOpen","close","context","formToRender","dispatch","queryParams","screenSize","setScreenSize","hasCloseButton","setHasCloseButton","currentForm","state","commonData","providers","thirdPartyAuthContext","secondaryProviders","thirdPartyAuthApiStatus","loginErrorCode","login","loginError","errorCode","resetPasswordTokenStatus","resetPassword","status","tpaHint","provider","tpaProvider","pendingState","tpa_hint","PENDING","validatedContext","_objectSpread","getForm","createElement","getSpinner","className","animation","variant","size","propTypes","bool","isRequired","func","shape","course_id","string","enrollment_action","email_opt_in","oneOf","AuthnComponentWithProvider","props","locale","SignInComponent","_extends","SignUpComponent","ResetPasswordComponent"],"sources":["../../src/authn-component/index.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\n\nimport { Spinner } from '@openedx/paragon';\nimport PropTypes from 'prop-types';\n\nimport { getThirdPartyAuthContext, setCurrentOpenedForm, setOnboardingComponentContext } from './data/reducers';\nimport validateContextData from './data/utils';\nimport BaseContainer from '../base-container';\nimport AuthnProvider from '../data/authnProvider';\nimport {\n  ENTERPRISE_LOGIN,\n  FORGOT_PASSWORD_FORM,\n  LOGIN_FORM,\n  PENDING_STATE,\n  PROGRESSIVE_PROFILING_FORM,\n  REGISTRATION_FORM,\n  RESET_PASSWORD_FORM,\n  VALID_FORMS,\n} from '../data/constants';\nimport { useDispatch, useSelector } from '../data/storeHooks';\nimport getAllPossibleQueryParams from '../data/utils';\nimport {\n  ForgotPasswordForm,\n  LoginForm,\n  ProgressiveProfilingForm,\n  RegistrationForm,\n  ResetPasswordForm,\n} from '../forms';\nimport EnterpriseSSO from '../forms/enterprise-sso-popup';\nimport { getTpaHint, getTpaProvider } from '../forms/enterprise-sso-popup/data/utils';\nimport { REQUIRE_PASSWORD_CHANGE } from '../forms/login-popup/data/constants';\nimport { TOKEN_STATE } from '../forms/reset-password-popup/reset-password/data/constants';\n/**\n * Main component that conditionally renders a login or registration form inside a modal window.\n *\n * @param {boolean} isOpen - Required. Whether the modal window is open.\n * @param {function} close - Required. Function to close the modal window.\n * @param {string} formToRender - Optional. Indicates which form to render ('login' or 'register').\n * @param {Object} context - Optional. Additional context needed for authentication, such as enrollment data.\n *\n * @returns {JSX.Element} The rendered component containing the login or registration form.\n */\nexport const AuthnComponent = ({\n  isOpen, close, context = null, formToRender,\n}) => {\n  const dispatch = useDispatch();\n  const queryParams = useMemo(() => getAllPossibleQueryParams(), []);\n\n  const [screenSize, setScreenSize] = useState('lg');\n  const [hasCloseButton, setHasCloseButton] = useState(true);\n\n  const currentForm = useSelector(state => state.commonData.currentForm);\n  const providers = useSelector(state => state.commonData.thirdPartyAuthContext?.providers);\n  const secondaryProviders = useSelector(state => state.commonData.thirdPartyAuthContext?.secondaryProviders);\n  const thirdPartyAuthApiStatus = useSelector(state => state.commonData.thirdPartyAuthApiStatus);\n  const loginErrorCode = useSelector(state => state.login.loginError?.errorCode);\n  const resetPasswordTokenStatus = useSelector(state => state.resetPassword?.status);\n\n  const tpaHint = getTpaHint();\n  const { provider: tpaProvider } = getTpaProvider(tpaHint, providers, secondaryProviders);\n  const pendingState = queryParams?.tpa_hint && thirdPartyAuthApiStatus === PENDING_STATE;\n\n  useEffect(() => {\n    if (currentForm === PROGRESSIVE_PROFILING_FORM) {\n      setHasCloseButton(false);\n      setScreenSize('fullscreen');\n    }\n    if (loginErrorCode === REQUIRE_PASSWORD_CHANGE\n      && currentForm === FORGOT_PASSWORD_FORM\n    ) {\n      setHasCloseButton(false);\n    }\n    if (currentForm === RESET_PASSWORD_FORM && resetPasswordTokenStatus === TOKEN_STATE.PENDING) {\n      setHasCloseButton(false);\n    }\n    if (currentForm === RESET_PASSWORD_FORM && resetPasswordTokenStatus !== TOKEN_STATE.PENDING) {\n      setHasCloseButton(true);\n    }\n  }, [currentForm, resetPasswordTokenStatus, loginErrorCode]);\n\n  useEffect(() => {\n    if (tpaProvider) {\n      dispatch(setCurrentOpenedForm(ENTERPRISE_LOGIN));\n    }\n    if (!tpaProvider && formToRender) {\n      dispatch(setCurrentOpenedForm(formToRender));\n    }\n  }, [dispatch, formToRender, tpaProvider, queryParams]);\n\n  useEffect(() => {\n    let validatedContext = {};\n    if (context) {\n      validatedContext = validateContextData(context);\n    }\n    dispatch(setOnboardingComponentContext(validatedContext));\n    dispatch(getThirdPartyAuthContext({ ...validatedContext, ...queryParams }));\n  }, [context, dispatch, queryParams]);\n\n  const getForm = () => {\n    if (currentForm === ENTERPRISE_LOGIN) {\n      return <EnterpriseSSO provider={tpaProvider} />;\n    }\n    if (currentForm === FORGOT_PASSWORD_FORM) {\n      return <ForgotPasswordForm />;\n    }\n    if (currentForm === LOGIN_FORM) {\n      return <LoginForm />;\n    }\n    if (currentForm === PROGRESSIVE_PROFILING_FORM) {\n      return <ProgressiveProfilingForm />;\n    }\n    if (currentForm === REGISTRATION_FORM) {\n      return <RegistrationForm />;\n    }\n    if (currentForm === RESET_PASSWORD_FORM) {\n      return <ResetPasswordForm />;\n    }\n    return null;\n  };\n\n  const getSpinner = () => (\n    <div className=\"w-100 text-center p-5\" data-testid=\"tpa-spinner\">\n      <Spinner className=\"m-5\" animation=\"border\" variant=\"primary\" />\n    </div>\n  );\n\n  return (\n    <BaseContainer\n      isOpen={isOpen}\n      close={close}\n      hasCloseButton={hasCloseButton}\n      size={screenSize}\n    >\n      {pendingState\n        ? getSpinner()\n        : getForm()}\n    </BaseContainer>\n  );\n};\n\nAuthnComponent.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  context: PropTypes.shape({\n    course_id: PropTypes.string,\n    enrollment_action: PropTypes.string,\n    email_opt_in: PropTypes.bool,\n  }),\n  formToRender: PropTypes.oneOf(VALID_FORMS).isRequired,\n};\n\n/**\n * Higher Order Component that wraps AuthnComponent with AppProvider.\n */\nconst AuthnComponentWithProvider = (props) => {\n  if (props.isOpen) {\n    return (\n      <AuthnProvider>\n        <AuthnComponent {...props} />\n      </AuthnProvider>\n    );\n  }\n\n  return null;\n};\n\nAuthnComponentWithProvider.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  context: PropTypes.shape({\n    course_id: PropTypes.string,\n    enrollment_action: PropTypes.string,\n    email_opt_in: PropTypes.bool,\n  }),\n  formToRender: PropTypes.oneOf(VALID_FORMS),\n  locale: PropTypes.string,\n};\n\n/**\n * Component that renders a sign-in form using AuthnComponentWithProvider.\n *\n * @param {Object} props - Props for the component.\n * @returns {JSX.Element} The rendered sign-in component.\n */\nexport const SignInComponent = (props) => (\n  <AuthnComponentWithProvider {...props} formToRender={LOGIN_FORM} />\n);\n\n/**\n * Component that renders a sign-up form using AuthnComponentWithProvider.\n *\n * @param {Object} props - Props for the component.\n * @returns {JSX.Element} The rendered sign-up component.\n */\nexport const SignUpComponent = (props) => (\n  <AuthnComponentWithProvider {...props} formToRender={REGISTRATION_FORM} />\n);\n\n/**\n * Component that renders a reset password form using AuthnComponentWithProvider.\n *\n * @param {Object} props - Props for the component.\n * @returns {JSX.Element} The rendered reset password component.\n */\nexport const ResetPasswordComponent = (props) => (\n  <AuthnComponentWithProvider {...props} formToRender={RESET_PASSWORD_FORM} />\n);\n"],"mappings":"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","ignoreList":[]}