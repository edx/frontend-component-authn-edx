{"version":3,"file":"AccountActivationMessage.js","names":["React","useEffect","useRef","getConfig","FormattedMessage","useIntl","Alert","CheckCircle","Error","PropTypes","ACCOUNT_ACTIVATION_MESSAGE","messages","AccountActivationMessage","_ref","messageType","formatMessage","alertRef","variant","ERROR","iconMapping","SUCCESS","activationMessage","heading","accountConfirmationSuccessMessageTitle","createElement","accountConfirmationSuccessMessage","INFO","accountConfirmationInfoMessage","supportLink","Link","href","ACTIVATION_EMAIL_SUPPORT_LINK","accountConfirmationSupportLink","accountConfirmationErrorMessageTitle","id","defaultMessage","description","values","current","focus","className","icon","ref","tabIndex","Heading","propTypes","string"],"sources":["../../../../src/forms/login-popup/components/AccountActivationMessage.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage, useIntl } from '@edx/frontend-platform/i18n';\nimport { Alert } from '@openedx/paragon';\nimport { CheckCircle, Error } from '@openedx/paragon/icons';\nimport PropTypes from 'prop-types';\n\nimport { ACCOUNT_ACTIVATION_MESSAGE } from '../data/constants';\nimport messages from '../messages';\n\n/**\n * Account activation component that holds account activation/confirmation banner logic.\n *\n * @param {string} messageType - The type of message either its success, info or error.\n *\n * @returns {JSX.Element} The rendered the account activation banner component.\n */\nconst AccountActivationMessage = ({ messageType = null }) => {\n  const { formatMessage } = useIntl();\n\n  const alertRef = useRef(null);\n  const variant = messageType === ACCOUNT_ACTIVATION_MESSAGE.ERROR ? 'danger' : messageType;\n  const iconMapping = {\n    [ACCOUNT_ACTIVATION_MESSAGE.SUCCESS]: CheckCircle,\n    [ACCOUNT_ACTIVATION_MESSAGE.ERROR]: Error,\n  };\n\n  let activationMessage;\n  let heading;\n  switch (messageType) {\n    case ACCOUNT_ACTIVATION_MESSAGE.SUCCESS: {\n      heading = formatMessage(messages.accountConfirmationSuccessMessageTitle);\n      activationMessage = <span>{formatMessage(messages.accountConfirmationSuccessMessage)}</span>;\n      break;\n    }\n    case ACCOUNT_ACTIVATION_MESSAGE.INFO: {\n      activationMessage = formatMessage(messages.accountConfirmationInfoMessage);\n      break;\n    }\n    case ACCOUNT_ACTIVATION_MESSAGE.ERROR: {\n      const supportLink = (\n        <Alert.Link href={`mailto:${getConfig().ACTIVATION_EMAIL_SUPPORT_LINK}`}>\n          {formatMessage(messages.accountConfirmationSupportLink)}\n        </Alert.Link>\n      );\n\n      heading = formatMessage(messages.accountConfirmationErrorMessageTitle);\n      activationMessage = (\n        <FormattedMessage\n          id=\"account.activation.error.message\"\n          defaultMessage=\"Something went wrong, please {supportLink} to resolve this issue.\"\n          description=\"Account activation error message\"\n          values={{ supportLink }}\n        />\n      );\n      break;\n    }\n    default:\n      break;\n  }\n\n  useEffect(() => {\n    if (alertRef.current) {\n      alertRef.current.focus();\n    }\n  }, []);\n\n  return activationMessage ? (\n    <Alert\n      id=\"account-activation-message\"\n      className=\"mb-5\"\n      variant={variant}\n      icon={iconMapping[messageType]}\n      ref={alertRef}\n      tabIndex=\"0\"\n    >\n      {heading && <Alert.Heading>{heading}</Alert.Heading>}\n      {activationMessage}\n    </Alert>\n  ) : null;\n};\n\nAccountActivationMessage.propTypes = {\n  messageType: PropTypes.string,\n};\n\nexport default AccountActivationMessage;\n"],"mappings":"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","ignoreList":[]}