{"version":3,"file":"reducers.js","names":["createSlice","COMPLETE_STATE","DEFAULT_STATE","FAILURE_STATE","PENDING_STATE","storeName","LOGIN_SLICE_NAME","loginInitialState","submitState","isLoginSSOIntent","loginError","loginResult","showResetPasswordSuccessBanner","loginSlice","name","initialState","reducers","loginUser","state","loginUserSuccess","_ref","payload","setShowPasswordResetBanner","loginUserFailed","_ref2","context","errorCode","email","value","errorContext","_objectSpread","errorMessage","loginErrorClear","setLoginSSOIntent","actions","reducer"],"sources":["../../../../src/forms/login-popup/data/reducers.js"],"sourcesContent":["/**\n * Redux slice for managing login state.\n * This slice handles the login process, including the submission state,\n * login success, and any login errors.\n */\n\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport {\n  COMPLETE_STATE,\n  DEFAULT_STATE,\n  FAILURE_STATE,\n  PENDING_STATE,\n} from '../../../data/constants';\n\nexport const storeName = 'login';\nexport const LOGIN_SLICE_NAME = 'login';\n\nexport const loginInitialState = {\n  submitState: DEFAULT_STATE,\n  isLoginSSOIntent: false,\n  loginError: {},\n  loginResult: {},\n  showResetPasswordSuccessBanner: false,\n};\n\nexport const loginSlice = createSlice({\n  name: LOGIN_SLICE_NAME,\n  initialState: loginInitialState,\n  reducers: {\n    loginUser: (state) => {\n      state.submitState = PENDING_STATE;\n      state.loginError = {};\n    },\n    loginUserSuccess: (state, { payload }) => {\n      state.submitState = COMPLETE_STATE;\n      state.loginResult = payload;\n    },\n    setShowPasswordResetBanner: (state) => {\n      state.showResetPasswordSuccessBanner = true;\n    },\n    loginUserFailed: (state, { payload }) => {\n      const {\n        context,\n        errorCode,\n        email,\n        value,\n      } = payload;\n\n      const errorContext = { ...context, email, errorMessage: value };\n      state.loginError = { errorCode, errorContext };\n      state.loginResult = {};\n      state.submitState = FAILURE_STATE;\n    },\n    loginErrorClear: (state) => {\n      state.loginError = {};\n      state.submitState = DEFAULT_STATE;\n    },\n    setLoginSSOIntent: (state) => {\n      state.isLoginSSOIntent = true;\n    },\n  },\n});\n\nexport const {\n  loginErrorClear,\n  loginUser,\n  loginUserSuccess,\n  loginUserFailed,\n  setShowPasswordResetBanner,\n  setLoginSSOIntent,\n} = loginSlice.actions;\n\nexport default loginSlice.reducer;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SACEC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbC,aAAa,QACR,yBAAyB;AAEhC,OAAO,MAAMC,SAAS,GAAG,OAAO;AAChC,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AAEvC,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,WAAW,EAAEN,aAAa;EAC1BO,gBAAgB,EAAE,KAAK;EACvBC,UAAU,EAAE,CAAC,CAAC;EACdC,WAAW,EAAE,CAAC,CAAC;EACfC,8BAA8B,EAAE;AAClC,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGb,WAAW,CAAC;EACpCc,IAAI,EAAER,gBAAgB;EACtBS,YAAY,EAAER,iBAAiB;EAC/BS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACV,WAAW,GAAGJ,aAAa;MACjCc,KAAK,CAACR,UAAU,GAAG,CAAC,CAAC;IACvB,CAAC;IACDS,gBAAgB,EAAEA,CAACD,KAAK,EAAAE,IAAA,KAAkB;MAAA,IAAhB;QAAEC;MAAQ,CAAC,GAAAD,IAAA;MACnCF,KAAK,CAACV,WAAW,GAAGP,cAAc;MAClCiB,KAAK,CAACP,WAAW,GAAGU,OAAO;IAC7B,CAAC;IACDC,0BAA0B,EAAGJ,KAAK,IAAK;MACrCA,KAAK,CAACN,8BAA8B,GAAG,IAAI;IAC7C,CAAC;IACDW,eAAe,EAAEA,CAACL,KAAK,EAAAM,KAAA,KAAkB;MAAA,IAAhB;QAAEH;MAAQ,CAAC,GAAAG,KAAA;MAClC,MAAM;QACJC,OAAO;QACPC,SAAS;QACTC,KAAK;QACLC;MACF,CAAC,GAAGP,OAAO;MAEX,MAAMQ,YAAY,GAAAC,aAAA,CAAAA,aAAA,KAAQL,OAAO;QAAEE,KAAK;QAAEI,YAAY,EAAEH;MAAK,EAAE;MAC/DV,KAAK,CAACR,UAAU,GAAG;QAAEgB,SAAS;QAAEG;MAAa,CAAC;MAC9CX,KAAK,CAACP,WAAW,GAAG,CAAC,CAAC;MACtBO,KAAK,CAACV,WAAW,GAAGL,aAAa;IACnC,CAAC;IACD6B,eAAe,EAAGd,KAAK,IAAK;MAC1BA,KAAK,CAACR,UAAU,GAAG,CAAC,CAAC;MACrBQ,KAAK,CAACV,WAAW,GAAGN,aAAa;IACnC,CAAC;IACD+B,iBAAiB,EAAGf,KAAK,IAAK;MAC5BA,KAAK,CAACT,gBAAgB,GAAG,IAAI;IAC/B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXuB,eAAe;EACff,SAAS;EACTE,gBAAgB;EAChBI,eAAe;EACfD,0BAA0B;EAC1BW;AACF,CAAC,GAAGpB,UAAU,CAACqB,OAAO;AAEtB,eAAerB,UAAU,CAACsB,OAAO","ignoreList":[]}