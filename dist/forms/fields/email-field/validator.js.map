{"version":3,"file":"validator.js","names":["distance","COMMON_EMAIL_PROVIDERS","DEFAULT_SERVICE_PROVIDER_DOMAINS","DEFAULT_TOP_LEVEL_DOMAINS","messages","VALID_EMAIL_REGEX","emailRegex","RegExp","getLevenshteinSuggestion","word","knownWords","similarityThreshold","arguments","length","undefined","minEditDistance","mostSimilar","i","editDistance","toLowerCase","getSuggestionForInvalidEmail","domain","username","defaultDomains","suggestion","includes","validateEmailAddress","value","domainName","validation","hasError","type","hasMultipleSubdomains","match","serviceLevelDomain","topLevelDomain","split","tldSuggestion","serviceSuggestion","validateEmail","formatMessage","fieldError","emailSuggestion","emptyEmailFieldError","emailInvalidFormaterror","test","response","_objectSpread"],"sources":["../../../../src/forms/fields/email-field/validator.js"],"sourcesContent":["import { distance } from 'fastest-levenshtein';\n\nimport {\n  COMMON_EMAIL_PROVIDERS,\n  DEFAULT_SERVICE_PROVIDER_DOMAINS,\n  DEFAULT_TOP_LEVEL_DOMAINS,\n} from './constants';\nimport messages from './messages';\nimport { VALID_EMAIL_REGEX } from '../../registration-popup/data/constants';\n\nexport const emailRegex = new RegExp(VALID_EMAIL_REGEX, 'i');\n\nexport const getLevenshteinSuggestion = (word, knownWords, similarityThreshold = 4) => {\n  if (!word) {\n    return null;\n  }\n\n  let minEditDistance = 100;\n  let mostSimilar = word;\n\n  for (let i = 0; i < knownWords.length; i++) {\n    const editDistance = distance(knownWords[i].toLowerCase(), word.toLowerCase());\n    if (editDistance < minEditDistance) {\n      minEditDistance = editDistance;\n      mostSimilar = knownWords[i];\n    }\n  }\n\n  return minEditDistance <= similarityThreshold && word !== mostSimilar ? mostSimilar : null;\n};\n\nexport const getSuggestionForInvalidEmail = (domain, username) => {\n  if (!domain) {\n    return '';\n  }\n\n  const defaultDomains = ['yahoo', 'aol', 'hotmail', 'live', 'outlook', 'gmail'];\n  const suggestion = getLevenshteinSuggestion(domain, COMMON_EMAIL_PROVIDERS);\n\n  if (suggestion) {\n    return `${username}@${suggestion}`;\n  }\n\n  for (let i = 0; i < defaultDomains.length; i++) {\n    if (domain.includes(defaultDomains[i])) {\n      return `${username}@${defaultDomains[i]}.com`;\n    }\n  }\n\n  return '';\n};\n\nexport const validateEmailAddress = (value, username, domainName) => {\n  let suggestion = null;\n  const validation = {\n    hasError: false,\n    suggestion: '',\n    type: '',\n  };\n\n  const hasMultipleSubdomains = value.match(/\\./g).length > 1;\n  const [serviceLevelDomain, topLevelDomain] = domainName.split('.');\n  const tldSuggestion = !DEFAULT_TOP_LEVEL_DOMAINS.includes(topLevelDomain);\n  const serviceSuggestion = getLevenshteinSuggestion(serviceLevelDomain, DEFAULT_SERVICE_PROVIDER_DOMAINS, 2);\n\n  if (DEFAULT_SERVICE_PROVIDER_DOMAINS.includes(serviceSuggestion || serviceLevelDomain)) {\n    suggestion = `${username}@${serviceSuggestion || serviceLevelDomain}.com`;\n  }\n\n  if (!hasMultipleSubdomains && tldSuggestion) {\n    validation.suggestion = suggestion;\n    validation.type = 'error';\n  } else if (serviceSuggestion) {\n    validation.suggestion = suggestion;\n    validation.type = 'warning';\n  } else {\n    suggestion = getLevenshteinSuggestion(domainName, COMMON_EMAIL_PROVIDERS, 3);\n    if (suggestion) {\n      validation.suggestion = `${username}@${suggestion}`;\n      validation.type = 'warning';\n    }\n  }\n\n  if (!hasMultipleSubdomains && tldSuggestion) {\n    validation.hasError = true;\n  }\n\n  return validation;\n};\n\nconst validateEmail = (value, formatMessage) => {\n  let fieldError = '';\n  let emailSuggestion = { suggestion: '', type: '' };\n\n  if (!value) {\n    fieldError = formatMessage(messages.emptyEmailFieldError);\n  } else if (value.length <= 2) {\n    fieldError = formatMessage(messages.emailInvalidFormaterror);\n  } else {\n    const [username, domainName] = value.split('@');\n    // Check if email address is invalid. If we have a suggestion for invalid email\n    // provide that along with the error message.\n    if (!emailRegex.test(value)) {\n      fieldError = formatMessage(messages.emailInvalidFormaterror);\n      emailSuggestion = {\n        suggestion: getSuggestionForInvalidEmail(domainName, username),\n        type: 'error',\n      };\n    } else {\n      const response = validateEmailAddress(value, username, domainName);\n      if (response.hasError) {\n        fieldError = formatMessage(messages.emailInvalidFormaterror);\n        delete response.hasError;\n      }\n      emailSuggestion = { ...response };\n    }\n  }\n  return { fieldError, suggestion: emailSuggestion };\n};\n\nexport default validateEmail;\n"],"mappings":"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","ignoreList":[]}