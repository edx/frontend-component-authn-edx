{"version":3,"file":"service.js","names":["getConfig","getHttpClient","formurlencoded","validateTokenRequest","token","requestConfig","headers","data","post","LMS_BASE_URL","catch","e","resetPasswordRequest","payload","queryParams","url","URL","is_account_recovery","searchParams","append","href","validatePasswordRequest","errorMessage","validation_decisions","password"],"sources":["../../../../../src/forms/reset-password-popup/reset-password/data/service.js"],"sourcesContent":["import { getConfig } from '@edx/frontend-platform';\nimport { getHttpClient } from '@edx/frontend-platform/auth';\nimport formurlencoded from 'form-urlencoded';\n\nexport async function validateTokenRequest(token) {\n  const requestConfig = {\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n  };\n\n  const { data } = await getHttpClient()\n    .post(\n      `${getConfig().LMS_BASE_URL}/user_api/v1/account/password_reset/token/validate/`,\n      formurlencoded({ token }),\n      requestConfig,\n    )\n    .catch((e) => {\n      throw (e);\n    });\n  return data;\n}\n\nexport async function resetPasswordRequest(payload, token, queryParams) {\n  const requestConfig = {\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n  };\n  const url = new URL(`${getConfig().LMS_BASE_URL}/password/reset/${token}/`);\n\n  if (queryParams.is_account_recovery) {\n    url.searchParams.append('is_account_recovery', true);\n  }\n\n  const { data } = await getHttpClient()\n    .post(url.href, formurlencoded(payload), requestConfig)\n    .catch((e) => {\n      throw (e);\n    });\n  return data;\n}\n\nexport async function validatePasswordRequest(payload) {\n  const requestConfig = {\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n  };\n  const { data } = await getHttpClient()\n    .post(\n      `${getConfig().LMS_BASE_URL}/api/user/v1/validation/registration`,\n      formurlencoded(payload),\n      requestConfig,\n    )\n    .catch((e) => {\n      throw (e);\n    });\n\n  let errorMessage = '';\n  // Be careful about grabbing this message, since we could have received an HTTP error or the\n  // endpoint didn't give us what we expect. We only care if we get a clear error message.\n  if (data.validation_decisions && data.validation_decisions.password) {\n    errorMessage = data.validation_decisions.password;\n  }\n\n  return errorMessage;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,wBAAwB;AAClD,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,OAAOC,cAAc,MAAM,iBAAiB;AAE5C,OAAO,eAAeC,oBAAoBA,CAACC,KAAK,EAAE;EAChD,MAAMC,aAAa,GAAG;IACpBC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAoC;EACjE,CAAC;EAED,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,aAAa,CAAC,CAAC,CACnCO,IAAI,CACF,GAAER,SAAS,CAAC,CAAC,CAACS,YAAa,qDAAoD,EAChFP,cAAc,CAAC;IAAEE;EAAM,CAAC,CAAC,EACzBC,aACF,CAAC,CACAK,KAAK,CAAEC,CAAC,IAAK;IACZ,MAAOA,CAAC;EACV,CAAC,CAAC;EACJ,OAAOJ,IAAI;AACb;AAEA,OAAO,eAAeK,oBAAoBA,CAACC,OAAO,EAAET,KAAK,EAAEU,WAAW,EAAE;EACtE,MAAMT,aAAa,GAAG;IACpBC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAoC;EACjE,CAAC;EACD,MAAMS,GAAG,GAAG,IAAIC,GAAG,CAAE,GAAEhB,SAAS,CAAC,CAAC,CAACS,YAAa,mBAAkBL,KAAM,GAAE,CAAC;EAE3E,IAAIU,WAAW,CAACG,mBAAmB,EAAE;IACnCF,GAAG,CAACG,YAAY,CAACC,MAAM,CAAC,qBAAqB,EAAE,IAAI,CAAC;EACtD;EAEA,MAAM;IAAEZ;EAAK,CAAC,GAAG,MAAMN,aAAa,CAAC,CAAC,CACnCO,IAAI,CAACO,GAAG,CAACK,IAAI,EAAElB,cAAc,CAACW,OAAO,CAAC,EAAER,aAAa,CAAC,CACtDK,KAAK,CAAEC,CAAC,IAAK;IACZ,MAAOA,CAAC;EACV,CAAC,CAAC;EACJ,OAAOJ,IAAI;AACb;AAEA,OAAO,eAAec,uBAAuBA,CAACR,OAAO,EAAE;EACrD,MAAMR,aAAa,GAAG;IACpBC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAoC;EACjE,CAAC;EACD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,aAAa,CAAC,CAAC,CACnCO,IAAI,CACF,GAAER,SAAS,CAAC,CAAC,CAACS,YAAa,sCAAqC,EACjEP,cAAc,CAACW,OAAO,CAAC,EACvBR,aACF,CAAC,CACAK,KAAK,CAAEC,CAAC,IAAK;IACZ,MAAOA,CAAC;EACV,CAAC,CAAC;EAEJ,IAAIW,YAAY,GAAG,EAAE;EACrB;EACA;EACA,IAAIf,IAAI,CAACgB,oBAAoB,IAAIhB,IAAI,CAACgB,oBAAoB,CAACC,QAAQ,EAAE;IACnEF,YAAY,GAAGf,IAAI,CAACgB,oBAAoB,CAACC,QAAQ;EACnD;EAEA,OAAOF,YAAY;AACrB","ignoreList":[]}