{"version":3,"file":"index.js","names":["React","useEffect","useMemo","useRef","useState","useIntl","Container","Form","Spinner","StatefulButton","ResetPasswordFailure","PASSWORD_RESET","PASSWORD_RESET_ERROR","PASSWORD_VALIDATION_ERROR","SUCCESS","TOKEN_STATE","resetPassword","validatePassword","validateToken","setCurrentOpenedForm","COMPLETE_STATE","DEFAULT_STATE","FORGOT_PASSWORD_FORM","FORM_SUBMISSION_ERROR","LOGIN_FORM","PENDING_STATE","useDispatch","useSelector","getAllPossibleQueryParams","trackPasswordResetSuccess","trackResetPasswordPageViewed","PasswordField","messages","ResetPasswordHeader","LETTER_REGEX","NUMBER_REGEX","ResetPasswordPage","dispatch","queryParams","passwordResetToken","password_reset_token","formatMessage","newPassword","setNewPassword","confirmPassword","setConfirmPassword","formErrors","setFormErrors","errorCode","setErrorCode","newPasswordRef","status","state","tokenValidationState","errorMsg","backendValidationError","validatePasswordFromBackend","password","payload","reset_password_page","preState","_objectSpread","VALID","current","focus","validateInput","name","value","shouldValidateFromBackend","arguments","length","undefined","passwordRequiredMessage","test","passwordValidationMessage","confirmYourPassword","passwordDoNotMatch","Object","values","some","x","handleOnBlur","event","target","handleOnFocus","e","PENDING","handleSubmit","preventDefault","isPasswordValid","isPasswordConfirmed","formPayload","new_password1","new_password2","params","token","createElement","size","className","resetPasswordTokenValidatingHeadingText","animation","variant","INVALID_TOKEN","enterConfirmPasswordMessage","id","dataTestId","handleChange","handleFocus","handleBlur","errorMessage","floatingLabel","newPasswordLabel","ref","confirmPasswordLabel","type","labels","default","resetPasswordButton","pending","onClick","onMouseDown"],"sources":["../../../../src/forms/reset-password-popup/reset-password/index.jsx"],"sourcesContent":["import React, {\n  useEffect, useMemo, useRef, useState,\n} from 'react';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Container, Form, Spinner, StatefulButton,\n} from '@openedx/paragon';\n\nimport ResetPasswordFailure from './components/ResetPasswordFailure';\nimport {\n  PASSWORD_RESET, PASSWORD_RESET_ERROR,\n  PASSWORD_VALIDATION_ERROR, SUCCESS, TOKEN_STATE,\n} from './data/constants';\nimport { resetPassword, validatePassword, validateToken } from './data/reducers';\nimport { setCurrentOpenedForm } from '../../../authn-component/data/reducers';\nimport {\n  COMPLETE_STATE,\n  DEFAULT_STATE, FORGOT_PASSWORD_FORM, FORM_SUBMISSION_ERROR, LOGIN_FORM, PENDING_STATE,\n} from '../../../data/constants';\nimport { useDispatch, useSelector } from '../../../data/storeHooks';\nimport getAllPossibleQueryParams from '../../../data/utils';\nimport { trackPasswordResetSuccess, trackResetPasswordPageViewed } from '../../../tracking/trackers/reset-password';\nimport { PasswordField } from '../../fields';\nimport messages from '../messages';\nimport ResetPasswordHeader from '../ResetPasswordHeader';\n\nexport const LETTER_REGEX = /[a-zA-Z]/;\nexport const NUMBER_REGEX = /\\d/;\n\n/**\n * ResetPasswordForm component for completing user password reset.\n * This component provides a form for users to reset their password.\n * @returns {string} A message indicating the success or failure of the password reset process.\n */\nconst ResetPasswordPage = () => {\n  const dispatch = useDispatch();\n\n  const queryParams = useMemo(() => getAllPossibleQueryParams(), []);\n  const passwordResetToken = queryParams?.password_reset_token;\n\n  // const ResetPasswordPage = ({ errorMsg = null }) => {\n  const { formatMessage } = useIntl();\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [formErrors, setFormErrors] = useState({});\n  const [errorCode, setErrorCode] = useState(null);\n\n  const newPasswordRef = useRef(null);\n\n  const status = useSelector(state => state.resetPassword.status);\n  const tokenValidationState = useSelector(state => state.resetPassword.status);\n  const errorMsg = useSelector(state => state.resetPassword?.errorMsg);\n  const backendValidationError = useSelector(state => state.resetPassword?.backendValidationError);\n\n  const validatePasswordFromBackend = (password) => {\n    const payload = {\n      reset_password_page: true,\n      password,\n    };\n    dispatch(validatePassword(payload));\n  };\n\n  useEffect(() => {\n    if (passwordResetToken) {\n      dispatch(validateToken(passwordResetToken));\n    }\n  }, [dispatch, passwordResetToken]);\n\n  useEffect(() => {\n    setFormErrors((preState) => ({\n      ...preState,\n      newPassword: backendValidationError || '',\n    }));\n  }, [backendValidationError]);\n\n  useEffect(() => {\n    if (status === TOKEN_STATE.VALID && newPasswordRef.current) {\n      newPasswordRef.current.focus();\n    }\n  }, [status]);\n\n  useEffect(() => {\n    if (tokenValidationState === COMPLETE_STATE && status === TOKEN_STATE.VALID) {\n      trackResetPasswordPageViewed();\n    }\n  }, [status, tokenValidationState]);\n\n  const validateInput = (name, value, shouldValidateFromBackend = true) => {\n    switch (name) {\n      case 'newPassword':\n       if (!value) {\n         formErrors.newPassword = formatMessage(messages.passwordRequiredMessage);\n       } else if (!LETTER_REGEX.test(value) || !NUMBER_REGEX.test(value) || value.length < 8) {\n         formErrors.newPassword = formatMessage(messages.passwordValidationMessage);\n       } else if (shouldValidateFromBackend) {\n         validatePasswordFromBackend(value);\n       }\n        break;\n      case 'confirmPassword':\n        if (!value) {\n          formErrors.confirmPassword = formatMessage(messages.confirmYourPassword);\n        } else if (value !== newPassword) {\n          formErrors.confirmPassword = formatMessage(messages.passwordDoNotMatch);\n        } else {\n          formErrors.confirmPassword = '';\n        }\n        break;\n      default:\n        break;\n    }\n    setFormErrors({ ...formErrors });\n    return !Object.values(formErrors).some(x => (x !== ''));\n  };\n\n  const handleOnBlur = (event) => {\n    const { name, value } = event.target;\n    validateInput(name, value);\n  };\n\n  const handleOnFocus = (e) => {\n    setFormErrors({ ...formErrors, [e.target.name]: '' });\n  };\n\n  useEffect(() => {\n    if (status !== TOKEN_STATE.PENDING && status !== PASSWORD_RESET_ERROR) {\n      setErrorCode(status);\n    }\n    if (status === PASSWORD_VALIDATION_ERROR) {\n      setFormErrors({ newPassword: formatMessage(messages.passwordValidationMessage) });\n    }\n  }, [status, formatMessage]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const isPasswordValid = validateInput('newPassword', newPassword, false);\n    const isPasswordConfirmed = validateInput('confirmPassword', confirmPassword);\n    if (isPasswordValid && isPasswordConfirmed) {\n      const formPayload = {\n        new_password1: newPassword,\n        new_password2: confirmPassword,\n      };\n      const params = queryParams;\n      dispatch(resetPassword({ formPayload, token: passwordResetToken, params }));\n    } else {\n      setErrorCode(FORM_SUBMISSION_ERROR);\n    }\n  };\n\n  if (!passwordResetToken) {\n    dispatch(setCurrentOpenedForm(FORGOT_PASSWORD_FORM));\n  }\n\n  if (status === TOKEN_STATE.PENDING || status === PENDING_STATE) {\n    return (\n      <Container\n        size=\"lg\"\n        className=\"loader-container d-flex flex-column justify-content-center align-items-center my-6 w-100 h-100 text-center\"\n      >\n        <h1 className=\"loader-heading text-center mb-4\">{formatMessage(messages.resetPasswordTokenValidatingHeadingText)}</h1>\n        <Spinner animation=\"border\" variant=\"primary\" className=\"spinner--position-centered\" />;\n      </Container>\n    );\n  } if (status === PASSWORD_RESET_ERROR || status === PASSWORD_RESET.INVALID_TOKEN) {\n    dispatch(setCurrentOpenedForm(FORGOT_PASSWORD_FORM));\n  } else if (status === SUCCESS) {\n    trackPasswordResetSuccess();\n    dispatch(setCurrentOpenedForm(LOGIN_FORM));\n  }\n\n  return (\n    <Container size=\"lg\" className=\"authn__popup-container overflow-auto\">\n      <ResetPasswordHeader />\n      <ResetPasswordFailure errorCode={errorCode} errorMsg={errorMsg} />\n      <div className=\"text-gray-800 mb-4\">{formatMessage(messages.enterConfirmPasswordMessage)}</div>\n      <Form id=\"set-reset-password-form\" name=\"set-reset-password-form\" className=\"d-flex flex-column\">\n        <PasswordField\n          id=\"newPassword\"\n          name=\"newPassword\"\n          dataTestId=\"newPassword\"\n          value={newPassword}\n          handleChange={(e) => setNewPassword(e.target.value)}\n          handleFocus={handleOnFocus}\n          handleBlur={handleOnBlur}\n          errorMessage={formErrors.newPassword}\n          floatingLabel={formatMessage(messages.newPasswordLabel)}\n          ref={newPasswordRef}\n        />\n        <PasswordField\n          id=\"confirmPassword\"\n          name=\"confirmPassword\"\n          dataTestId=\"confirmPassword\"\n          value={confirmPassword}\n          handleChange={(e) => setConfirmPassword(e.target.value)}\n          handleFocus={handleOnFocus}\n          handleBlur={handleOnBlur}\n          errorMessage={formErrors.confirmPassword}\n          floatingLabel={formatMessage(messages.confirmPasswordLabel)}\n        />\n        <StatefulButton\n          id=\"reset-password\"\n          name=\"reset-password\"\n          type=\"submit\"\n          variant=\"primary\"\n          className=\"align-self-end authn-btn__pill-shaped\"\n          state={DEFAULT_STATE}\n          labels={{\n            default: formatMessage(messages.resetPasswordButton),\n            pending: '',\n          }}\n          onClick={e => handleSubmit(e)}\n          onMouseDown={(e) => e.preventDefault()}\n        />\n      </Form>\n    </Container>\n  );\n};\n\nexport default ResetPasswordPage;\n"],"mappings":"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","ignoreList":[]}