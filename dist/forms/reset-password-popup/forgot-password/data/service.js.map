{"version":3,"file":"service.js","names":["getConfig","getAuthenticatedHttpClient","formurlencoded","forgotPasswordService","email","requestConfig","headers","isPublic","data","post","LMS_BASE_URL","catch","e"],"sources":["../../../../../src/forms/reset-password-popup/forgot-password/data/service.js"],"sourcesContent":["import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport formurlencoded from 'form-urlencoded';\n\n/**\n * Function to handle forgot password requests.\n * This function sends a POST request to the LMS backend to initiate a password reset for the provided email.\n *\n * @param {string} email - The email address for which the password reset is requested.\n * @returns {Promise<Object>} - A promise that resolves with the response data from the LMS backend.\n * @throws {Error} - Throws an error if the HTTP request fails.\n */\nexport default async function forgotPasswordService(email) {\n  const requestConfig = {\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    isPublic: true,\n  };\n\n  const { data } = await getAuthenticatedHttpClient()\n    .post(\n      `${getConfig().LMS_BASE_URL}/account/password`,\n      formurlencoded({ email }),\n      requestConfig,\n    )\n    .catch((e) => {\n      throw (e);\n    });\n\n  return data;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,wBAAwB;AAClD,SAASC,0BAA0B,QAAQ,6BAA6B;AACxE,OAAOC,cAAc,MAAM,iBAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAeC,qBAAqBA,CAACC,KAAK,EAAE;EACzD,MAAMC,aAAa,GAAG;IACpBC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAoC,CAAC;IAChEC,QAAQ,EAAE;EACZ,CAAC;EAED,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMP,0BAA0B,CAAC,CAAC,CAChDQ,IAAI,CACF,GAAET,SAAS,CAAC,CAAC,CAACU,YAAa,mBAAkB,EAC9CR,cAAc,CAAC;IAAEE;EAAM,CAAC,CAAC,EACzBC,aACF,CAAC,CACAM,KAAK,CAAEC,CAAC,IAAK;IACZ,MAAOA,CAAC;EACV,CAAC,CAAC;EAEJ,OAAOJ,IAAI;AACb","ignoreList":[]}