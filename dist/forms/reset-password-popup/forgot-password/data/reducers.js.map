{"version":3,"file":"reducers.js","names":["createSlice","COMPLETE_STATE","DEFAULT_STATE","FORBIDDEN_STATE","INTERNAL_SERVER_ERROR","PENDING_STATE","storeName","FORGOT_PASSWORD_SLICE_NAME","forgotPasswordInitialState","status","forgotPasswordSlice","name","initialState","reducers","forgotPassword","state","forgotPasswordSuccess","forgotPasswordForbidden","forgotPasswordFailed","forgotPasswordClearStatus","forgotPassweordTokenInvalidFailure","_ref","payload","actions","reducer"],"sources":["../../../../../src/forms/reset-password-popup/forgot-password/data/reducers.js"],"sourcesContent":["/**\n * Redux slice for managing forgot password state.\n * This slice handles the forgot password process, including the submission state,\n * password reset success, and any errors that may occur.\n */\n\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport {\n  COMPLETE_STATE,\n  DEFAULT_STATE,\n  FORBIDDEN_STATE,\n  INTERNAL_SERVER_ERROR,\n  PENDING_STATE,\n} from '../../../../data/constants';\n\nexport const storeName = 'forgotPassword';\nexport const FORGOT_PASSWORD_SLICE_NAME = 'forgotPassword';\n\nexport const forgotPasswordInitialState = {\n  status: DEFAULT_STATE,\n};\n\nexport const forgotPasswordSlice = createSlice({\n  name: FORGOT_PASSWORD_SLICE_NAME,\n  initialState: forgotPasswordInitialState,\n  reducers: {\n    forgotPassword: (state) => {\n      state.status = PENDING_STATE;\n    },\n    forgotPasswordSuccess: (state) => {\n      state.status = COMPLETE_STATE;\n    },\n    forgotPasswordForbidden: (state) => {\n      state.status = FORBIDDEN_STATE;\n    },\n    forgotPasswordFailed: (state) => {\n      state.status = INTERNAL_SERVER_ERROR;\n    },\n    forgotPasswordClearStatus: (state) => {\n      state.status = DEFAULT_STATE;\n    },\n    forgotPassweordTokenInvalidFailure: (state, { payload }) => {\n      state.status = payload;\n    },\n  },\n});\n\nexport const {\n  forgotPassword,\n  forgotPasswordSuccess,\n  forgotPasswordForbidden,\n  forgotPasswordFailed,\n  forgotPasswordClearStatus,\n  forgotPassweordTokenInvalidFailure,\n} = forgotPasswordSlice.actions;\n\nexport default forgotPasswordSlice.reducer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SACEC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,qBAAqB,EACrBC,aAAa,QACR,4BAA4B;AAEnC,OAAO,MAAMC,SAAS,GAAG,gBAAgB;AACzC,OAAO,MAAMC,0BAA0B,GAAG,gBAAgB;AAE1D,OAAO,MAAMC,0BAA0B,GAAG;EACxCC,MAAM,EAAEP;AACV,CAAC;AAED,OAAO,MAAMQ,mBAAmB,GAAGV,WAAW,CAAC;EAC7CW,IAAI,EAAEJ,0BAA0B;EAChCK,YAAY,EAAEJ,0BAA0B;EACxCK,QAAQ,EAAE;IACRC,cAAc,EAAGC,KAAK,IAAK;MACzBA,KAAK,CAACN,MAAM,GAAGJ,aAAa;IAC9B,CAAC;IACDW,qBAAqB,EAAGD,KAAK,IAAK;MAChCA,KAAK,CAACN,MAAM,GAAGR,cAAc;IAC/B,CAAC;IACDgB,uBAAuB,EAAGF,KAAK,IAAK;MAClCA,KAAK,CAACN,MAAM,GAAGN,eAAe;IAChC,CAAC;IACDe,oBAAoB,EAAGH,KAAK,IAAK;MAC/BA,KAAK,CAACN,MAAM,GAAGL,qBAAqB;IACtC,CAAC;IACDe,yBAAyB,EAAGJ,KAAK,IAAK;MACpCA,KAAK,CAACN,MAAM,GAAGP,aAAa;IAC9B,CAAC;IACDkB,kCAAkC,EAAEA,CAACL,KAAK,EAAAM,IAAA,KAAkB;MAAA,IAAhB;QAAEC;MAAQ,CAAC,GAAAD,IAAA;MACrDN,KAAK,CAACN,MAAM,GAAGa,OAAO;IACxB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXR,cAAc;EACdE,qBAAqB;EACrBC,uBAAuB;EACvBC,oBAAoB;EACpBC,yBAAyB;EACzBC;AACF,CAAC,GAAGV,mBAAmB,CAACa,OAAO;AAE/B,eAAeb,mBAAmB,CAACc,OAAO","ignoreList":[]}